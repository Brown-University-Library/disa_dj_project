
import { uncleanString } from './browse_tabulator_clean-string.js';

// Convenience method: generate a DOM-setter

function getModalContentSetter(idOrClass, textOrHTML) {
  const elems = document.querySelectorAll(`#${idOrClass},.${idOrClass}`);
  return function(content) {
    elems.forEach(elem => elem[`inner${textOrHTML}`] = content);
  }
}

// Initialize Modal object (only done once)

function initializeModalApi() {

  const HTML = 'HTML', TEXT = 'Text',
        setDetailsTable = getModalContentSetter('details-table', HTML),
        setDocDetailsTable = getModalContentSetter('source-details-table', HTML);

  const detailsModal = {
    show: () => document.getElementById('details-modal').showModal(),
    setId: getModalContentSetter('details-id', TEXT),
    setName: getModalContentSetter('details-title-name', TEXT),
    setDocTitle: getModalContentSetter('details-doc', TEXT),
    setTranscription: getModalContentSetter('details-transcription', HTML),
    setItemImageLink: imgUrl => document.getElementById('item-facsimile').setAttribute('href', imgUrl || ''),
    clearDetailsTable: () => setDetailsTable(''),
    addToDetailsTable: (label, value) => {
      document.getElementById('details-table').innerHTML +=
        `<tr><th>${label}</th><td>${value}</td></tr>`;
    },
    clearDocDetailsTable: () => setDocDetailsTable(''),
    addToDocDetailsTable: (label, value) => {
      document.getElementById('source-details-table').innerHTML +=
        `<tr><th>${label}</th><td>${value}</td></tr>`;
    },
    setReferentEditUrl: url => document.getElementById('referent-edit-link').href = url,
    setRecordEditUrl: url => document.getElementById('record-edit-link').href = url,
    setSourceEditUrl: url => document.getElementById('source-edit-link').href = url
  }

  return detailsModal;
}


// Called when "details" button pressed
//  Referenced in markup generated by Biographical formatter and
//  RowClick function under default formatting

function getShowDetailsFunction(sr) {

  const detailsModal = initializeModalApi(); // Initialize modal (only done once)

  const showDetails = function(id) {

    const data = sr.data.find(entry => entry.referent_db_id === id);
  
    // Populate modal
  
    if (data) {
  
      detailsModal.setName(data.all_name);
      detailsModal.setId(id);
  
      // Update URLs for edit buttons
  
      if (sr.user_is_authenticated) {
        detailsModal.setSourceEditUrl(sr.url.editSource(
          data.citation_data.citation_db_id
        ));
        detailsModal.setRecordEditUrl(sr.url.editRecord(
          data.citation_data.citation_db_id,
          data.reference_data.reference_db_id
        ));
        detailsModal.setReferentEditUrl(sr.url.editReferent(
          data.citation_data.citation_db_id,
          data.reference_data.reference_db_id,
          id
        ));
      }
  
      detailsModal.setTranscription(data.reference_data.transcription);
      detailsModal.setItemImageLink(data.reference_data.image_url);
      detailsModal.setDocTitle(uncleanString(data.citation_data.display.replace(/http[^\s]+/,'')));
      detailsModal.clearDetailsTable();
      detailsModal.clearDocDetailsTable();
  
      // Load referent data into details table
  
      const detailsTableContent = [
        ['Location', data.reference_data.all_locations],
        ['First name', data.name_first],
        ['Last name', data.name_last],
        ['Role(s)', data.roles.join(', ')],
        // ['Date', new Date(data.date.year, data.date.month, data.date.day).toDateString()],
        ['Tribe', data.all_tribes],
        ['Sex', data.sex],
        ['Origin', data.all_origins],
        ['Vocation', data.vocations.join(', ')],
        ['Age', data.age]
      ];
  
      // Load relationships into details table
  
      data.relationships.forEach(r => {
        detailsTableContent.push([
          r.description.charAt(0).toUpperCase() + r.description.slice(1),
          [ r.related_referent_info.related_referent_first_name,
            r.related_referent_info.related_referent_last_name
          ].join(' ') + `&nbsp;<div class="badge badge-primary">id <span id="details-id">${r.related_referent_info.related_referent_db_id}</span></div>`
        ])
      });
  
      detailsTableContent.filter(x => x[1])
        .forEach(([label, value]) => detailsModal.addToDetailsTable(label, value));
  
      // Load document details into a table
  
      const docDetailsTable = [
        ['Record type', data.reference_data.reference_type],
        ['Record ID', `<span class="badge badge-primary">${data.reference_data.reference_db_id}</span>`],
        ['Record date', data.reference_data.date_display],
        ['Location of event described in the record', data.reference_data.all_locations],
        ['National context of record', data.reference_data.national_context],
        ['Record appears in document with title', `<cite>${ uncleanString(data.citation_data.display)}</cite>`],
        ['Source type', data.citation_data.citation_type],
        ['Source ID', `<span class="badge badge-primary">${data.citation_data.citation_db_id}`]
      ];
  
      docDetailsTable.filter(x => x[1])
        .forEach(([label, value]) => detailsModal.addToDocDetailsTable(label, value));
  
      detailsModal.show();
    }
  }

  return showDetails;

}

export { getShowDetailsFunction }
